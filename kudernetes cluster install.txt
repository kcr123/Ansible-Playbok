https://medium.com/containermind/how-to-create-a-kubernetes-cluster-on-aws-in-few-minute

How to Create a Kubernetes Cluster on AWS in Few Minutes?
ans.)
1. Install AWS CLI 
# Linux
pip install awscli --upgrade --user
2.Install kops 
# Linux
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops
3.Create a new IAM user or use an existing IAM user and grant following permissions:
AmazonEC2FullAccess
AmazonRoute53FullAccess
AmazonS3FullAccess
AmazonVPCFullAccess
4.Configure the AWS CLI by providing the Access Key, Secret Access Key and the AWS region that you want the Kubernetes cluster to be installed:
aws configure
AWS Access Key ID [None]: AccessKeyValue
AWS Secret Access Key [None]: SecretAccessKeyValue
Default region name [None]: us-east-1
Default output format [None]:
5.Create an AWS S3 bucket for kops to persist its state:
bucket_name=imesh-kops-state-store
aws s3api create-bucket \
--bucket ${bucket_name} \
--region us-east-1
6.Enable versioning for the above S3 bucket:
aws s3api put-bucket-versioning --bucket ${bucket_name} --versioning-configuration Status=Enabled
7.Provide a name for the Kubernetes cluster and set the S3 bucket URL in the following environment variables:
export KOPS_CLUSTER_NAME=imesh.k8s.local
export KOPS_STATE_STORE=s3://${bucket_name}
8.Create a Kubernetes cluster definition using kops by providing the required node count, node size, and AWS zones. The node size or rather the EC2 instance type would need to be decided according to the workload that you are planning to run on the Kubernetes cluster:
kops create cluster \
--node-count=2 \
--node-size=t2.medium \
--zones=us-east-1a \
--name=${KOPS_CLUSTER_NAME}
9.If you are seeing any authentication issues, try to set the following environment variables to let kops directly read EC2 credentials without using the AWS CLI:
export AWS_ACCESS_KEY=AccessKeyValue
export AWS_SECRET_KEY=SecretAccessKeyValue
If needed execute the kops create cluster help command to find additional parameters:
kops create cluster --help
10. Review the Kubernetes cluster definition by executing the below command:
kops edit cluster --name ${KOPS_CLUSTER_NAME}
11. Now, let’s create the Kubernetes cluster on AWS by executing kops update command:
kops update cluster --name ${KOPS_CLUSTER_NAME} --yes
12. Above command may take some time to create the required infrastructure resources on AWS. Execute the validate command to check its status and wait until the cluster becomes ready:
kops validate cluster
Using cluster from kubectl context: imesh.k8s.local
Validating cluster imesh.k8s.local
INSTANCE GROUPS
NAME               ROLE    MACHINETYPE  MIN  MAX  SUBNETS
master-us-east-1a  Master  m3.medium    1    1    us-east-1a
nodes              Node    m4.xlarge    2    2    us-east-1a
NODE STATUS
NAME                           ROLE    READY
ip-172-20-48-50.ec2.internal   node    True
ip-172-20-50-191.ec2.internal  node    True
ip-172-20-55-27.ec2.internal   master  True
Your cluster imesh.k8s.local is ready
Once the above process completes, kops will configure the Kubernetes CLI (kubectl) with Kubernetes cluster API endpoint and user credentials.
13. Now, you may need to deploy the Kubernetes dashboard to access the cluster via its web based user interface:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
14. Execute the below command to find the admin user’s password:
kops get secrets kube --type secret -oplaintext
15. Execute the below command to find the Kubernetes master hostname:
kubectl cluster-info
Kubernetes master is running at https://api-imesh-k8s-local-<dynamic-id>.us-east-1.elb.amazonaws.com
KubeDNS is running at https://api-imesh-k8s-local-<dynamic-id>.us-east-1.elb.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy